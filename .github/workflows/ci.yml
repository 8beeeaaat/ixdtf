name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v5

    - name: Set up Go
      uses: actions/setup-go@v6
      with:
        go-version-file: go.mod

    - name: Cache Go modules
      uses: actions/cache@v3
      with:
        path: ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-

    - name: Download dependencies
      run: go mod download

    - name: Verify dependencies
      run: go mod verify

    - name: Format check
      run: |
        go fmt ./...
        if [ -n "$(git status --porcelain)" ]; then
          echo "Code is not formatted. Please run 'go fmt ./...'"
          git diff
          exit 1
        fi

    - name: Vet
      run: go vet ./...

    - name: Test
      run: go test -v ./...

    - name: Test with race detector
      run: go test -race -v ./...

    - name: Test coverage
      run: go test -coverprofile=coverage.out ./...

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.out
        flags: unittests

    - name: Benchmark
      run: go test -bench=. -benchmem -run=^$

  lint:
    name: Lint
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v5

    - name: Set up Go
      uses: actions/setup-go@v6
      with:
        go-version-file: go.mod

    - name: golangci-lint
      uses: golangci/golangci-lint-action@v6
      with:
          version: latest

  security:
    name: Security
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v5

    - name: Set up Go
      uses: actions/setup-go@v6
      with:
        go-version-file: go.mod


    - name: Run Gosec Security Scanner
      uses: securego/gosec@master
      with:
        args: ./...
