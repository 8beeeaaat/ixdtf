name: Release

on:
  push:
    tags:
      - 'v*.*.*'

permissions:
  contents: write

jobs:
  release:
    name: Create Release
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.25'

    - name: Verify tag format
      run: |
        if [[ ! "${GITHUB_REF_NAME}" =~ ^v[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
          echo "Invalid tag format: ${GITHUB_REF_NAME}"
          echo "Expected format: v1.2.3"
          exit 1
        fi

    - name: Run tests
      run: |
        go mod download
        go test -v ./...
        go test -race -v ./...

    - name: Run benchmarks
      run: go test -bench=. -run=^$

    - name: Generate changelog
      id: changelog
      run: |
        # Get previous tag
        PREV_TAG=$(git describe --tags --abbrev=0 HEAD~1 2>/dev/null || echo "")

        # Generate changelog
        if [ -n "$PREV_TAG" ]; then
          echo "## What's Changed" > CHANGELOG.md
          git log --oneline --no-merges ${PREV_TAG}..HEAD --pretty=format:"- %s" >> CHANGELOG.md
          echo "" >> CHANGELOG.md
          echo "**Full Changelog**: https://github.com/${{ github.repository }}/compare/${PREV_TAG}...${GITHUB_REF_NAME}" >> CHANGELOG.md
        else
          echo "## Initial Release" > CHANGELOG.md
          echo "This is the first release of the IXDTF library." >> CHANGELOG.md
        fi

        # Set output for later use
        {
          echo 'changelog<<EOF'
          cat CHANGELOG.md
          echo 'EOF'
        } >> "$GITHUB_OUTPUT"

    - name: Create GitHub Release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref_name }}
        release_name: Release ${{ github.ref_name }}
        body: ${{ steps.changelog.outputs.changelog }}
        draft: false
        prerelease: ${{ contains(github.ref_name, '-') }}

    - name: Validate go.mod version
      run: |
        TAG_VERSION="${GITHUB_REF_NAME#v}"
        MOD_VERSION=$(go list -m | cut -d' ' -f2)

        # Check if versions match (allow for development versions)
        if [[ "$MOD_VERSION" != "$TAG_VERSION"* ]]; then
          echo "Warning: go.mod version ($MOD_VERSION) doesn't match tag ($TAG_VERSION)"
        fi

  notify:
    name: Notify Release
    runs-on: ubuntu-latest
    needs: release
    if: success()

    steps:
    - name: Notify success
      run: |
        echo "âœ… Release ${{ github.ref_name }} created successfully!"
        echo "ðŸ“¦ Go module: github.com/${{ github.repository }}@${{ github.ref_name }}"
        echo "ðŸ”— Release URL: https://github.com/${{ github.repository }}/releases/tag/${{ github.ref_name }}"
